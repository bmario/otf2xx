# This file is part of otf2xx (https://github.com/tud-zih-energy/otf2xx)
# otf2xx - A wrapper for the Open Trace Format 2 library
#
# Copyright (c) 2016, Technische Universit√§t Dresden, Germany
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

project(otf2xx)

cmake_minimum_required(VERSION 3.8)

set(otf2xx_VERSION 1.0)

list(INSERT CMAKE_MODULE_PATH 0 ${CMAKE_CURRENT_LIST_DIR}/cmake)
find_package(OTF2 8.0.1 EXACT)

if (NOT OTF2_FOUND)
    message(FATAL_ERROR "Please download and install OTF2 2.1.\n"
    "Available from: http://www.vi-hps.org/upload/packages/otf2/otf2-2.1.tar.gz")
endif()

set(OTF2XX_CHRONO_DURATION_TYPE "picoseconds" CACHE STRING "The used underlying type for otf2::chrono::duration.")
set(otf2xx_allowed_duration_types "nanoseconds" "picoseconds")
set_property(CACHE OTF2XX_CHRONO_DURATION_TYPE PROPERTY STRINGS ${otf2xx_allowed_duration_types})
if(OTF2XX_CHRONO_DURATION_TYPE IN_LIST otf2xx_allowed_duration_types)
    message(STATUS "OTF2xx uses '${OTF2XX_CHRONO_DURATION_TYPE}' as chrono duration type.")
else()
    message(SEND_ERROR "OTF2XX_CHRONO_DURATION_TYPE must be one of ${otf2xx_allowed_duration_types}")
endif()

option(OTF2XX_WITH_MPI "Whether OTF2xx should be build with MPI support or not. (Requires Boost.MPI)" OFF)
option(OTF2XX_BUILD_SHARED_LIBS "Whether OTF2xx should be build shared or not." OFF)
set(BUILD_SHARED_LIBS OTF2XX_BUILD_SHARED_LIBS) # Don't use cache variable so other projects are not influenced

# Find programs required for template processing
get_filename_component(otf2_CONFIG_path "${OTF2_CONFIG_EXE}" DIRECTORY)
find_program(OTF2_TEMPLATE otf2-template
    HINTS "${otf2_CONFIG_path}")
if(NOT OTF2_TEMPLATE)
    message(FATAL_ERROR "Could not find otf2-template")
endif()
find_package(ClangFormat 5.0.0 REQUIRED)

# Src template dir
set(template_folder ${CMAKE_CURRENT_SOURCE_DIR}/templates)
# Target template dir
set(target_template_folder ${CMAKE_CURRENT_BINARY_DIR}/gen)
# Get all with ".template." in the name
file(GLOB_RECURSE templates RELATIVE ${template_folder} ${template_folder}/*.tmpl)
set(generated_files "")
# Copy the style file to a parent directory of the templates
file(COPY .clang-format DESTINATION ${target_template_folder})
foreach(template IN LISTS templates)
    set(input_file ${template_folder}/${template})
    string(REGEX REPLACE "\\.tmpl$" "" new_name ${template})
    set(new_file ${target_template_folder}/${new_name})
    get_filename_component(target_folder "${new_file}" DIRECTORY)
    # The generator cannot handle non-existing directories
    if(NOT EXISTS ${target_folder})
        file(MAKE_DIRECTORY ${target_folder})
    endif()
    add_custom_command(
        OUTPUT  ${new_file}
        COMMAND ${OTF2_TEMPLATE} ${input_file} ${new_file}
        COMMAND ${CLANG_FORMAT_EXECUTABLE} -i -style=file ${new_file}
        DEPENDS ${input_file}
    )
    list(APPEND generated_files ${new_file})
endforeach()
# Add a target on which others can depend
add_custom_target(GenerateTemplates DEPENDS ${generated_files})

add_library(otf2xx-core INTERFACE)
add_dependencies(otf2xx-core GenerateTemplates)
target_include_directories(otf2xx-core
    INTERFACE
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
        $<BUILD_INTERFACE:${target_template_folder}/include>
        $<INSTALL_INTERFACE:include>
)
target_link_libraries(otf2xx-core
    INTERFACE
        otf2::otf2
)
target_compile_features(otf2xx-core INTERFACE cxx_std_14)
target_compile_definitions(otf2xx-core
    INTERFACE
        OTF2XX_CHRONO_DURATION_TYPE=${OTF2XX_CHRONO_DURATION_TYPE}
)

if(OTF2XX_WITH_MPI)
    message(STATUS "Building OTF2xx with MPI support.")
    target_compile_definitions(otf2xx-core
        INTERFACE
            OTF2XX_HAS_MPI
    )
    target_link_libraries(otf2xx-core INTERFACE Boost::mpi MPI::MPI_CXX)
endif()

set(READER_SRCS src/reader/callback/definitions.cpp src/reader/callback/events.cpp)
add_library(otf2xx-reader src/reader/callback/definitions.cpp src/reader/callback/events.cpp)
target_link_libraries(otf2xx-reader
    PUBLIC
        otf2xx::Core)

add_library(otf2xx-writer INTERFACE)
target_link_libraries(otf2xx-writer
    INTERFACE
        otf2xx::Core
)

add_library(otf2xx-all INTERFACE)
target_link_libraries(otf2xx-all
    INTERFACE
        otf2xx::Core
        otf2xx::Reader
        otf2xx::Writer
)

add_library(otf2xx::otf2xx ALIAS otf2xx-all)
add_library(otf2xx::Core ALIAS otf2xx-core)
add_library(otf2xx::Reader ALIAS otf2xx-reader)
add_library(otf2xx::Writer ALIAS otf2xx-writer)

if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
    target_compile_options(otf2xx-core
        INTERFACE
            -Wall -Wextra -pedantic
    )

    install(DIRECTORY
        ${CMAKE_CURRENT_SOURCE_DIR}/include/otf2xx
        DESTINATION include
    )
    install(TARGETS otf2xx-core otf2xx-all otf2xx-reader otf2xx-writer EXPORT otf2xxTargets
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib
        RUNTIME DESTINATION bin
        INCLUDES DESTINATION include
    )
    install(EXPORT otf2xxTargets
        FILE otf2xxTargets.cmake
        NAMESPACE otf2xx::
        DESTINATION lib/cmake/otf2xx
    )

    include(CMakePackageConfigHelpers)
    write_basic_package_version_File("otf2xxConfigVersion.cmake"
        VERSION ${otf2xx_VERSION}
        COMPATIBILITY SameMajorVersion
    )
    install(FILES "otf2xxConfig.cmake" "${CMAKE_CURRENT_BINARY_DIR}/otf2xxConfigVersion.cmake"
        DESTINATION lib/cmake/otf2xx
    )

    include(CTest)
    add_subdirectory(tests)
endif()
